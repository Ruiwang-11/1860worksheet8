CHIP Counter {
    IN inc, reset;
    OUT out0, out1, out2, out3;

    PARTS:
    // 当前值寄存器
    Register(in=next, load=load, out=r);

    // 加1
    Inc16(in=r, out=plus1);

    // inc控制是否加1
    Mux16(a=r, b=plus1, sel=inc, out=afterInc);

    // reset控制是否归零
    Mux16(a=afterInc, b=false, sel=reset, out=next);

    // load控制：inc 或 reset 任意为1就加载
    Or(a=inc, b=reset, out=load);

    // ✅ 不使用切片提取 r[0]~r[3]
    // 用 And + 常量提取各位
    // 提取第0位
    And(a=r, b[0]=true, b[1]=false, b[2]=false, b[3]=false,
        b[4]=false, b[5]=false, b[6]=false, b[7]=false,
        b[8]=false, b[9]=false, b[10]=false, b[11]=false,
        b[12]=false, b[13]=false, b[14]=false, b[15]=false,
        out=w0);

    // 提取第1位
    And(a=r, b[0]=false, b[1]=true, b[2]=false, b[3]=false,
        b[4]=false, b[5]=false, b[6]=false, b[7]=false,
        b[8]=false, b[9]=false, b[10]=false, b[11]=false,
        b[12]=false, b[13]=false, b[14]=false, b[15]=false,
        out=w1);

    // 提取第2位
    And(a=r, b[0]=false, b[1]=false, b[2]=true, b[3]=false,
        b[4]=false, b[5]=false, b[6]=false, b[7]=false,
        b[8]=false, b[9]=false, b[10]=false, b[11]=false,
        b[12]=false, b[13]=false, b[14]=false, b[15]=false,
        out=w2);

    // 提取第3位
    And(a=r, b[0]=false, b[1]=false, b[2]=false, b[3]=true,
        b[4]=false, b[5]=false, b[6]=false, b[7]=false,
        b[8]=false, b[9]=false, b[10]=false, b[11]=false,
        b[12]=false, b[13]=false, b[14]=false, b[15]=false,
        out=w3);

    // 再提取低位（用 Bitwise Or 或 And 其中一位输出）
    And(a=w0, b=true, out=out0);
    And(a=w1, b=true, out=out1);
    And(a=w2, b=true, out=out2);
    And(a=w3, b=true, out=out3);
}

